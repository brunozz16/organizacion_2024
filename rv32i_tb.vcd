$date
	Fri Nov 15 12:30:45 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module rv32i_tb $end
$var wire 32 ! instruction [31:0] $end
$var wire 32 " pc [31:0] $end
$var reg 1 # clk $end
$var reg 1 $ reset $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 % zero $end
$var wire 32 & writeData [31:0] $end
$var wire 2 ' resSrc [1:0] $end
$var wire 1 ( regWrite $end
$var wire 1 ) pcSrc $end
$var wire 32 * pc [31:0] $end
$var wire 1 + memWrite $end
$var wire 32 , instruction [31:0] $end
$var wire 2 - inmSrc [1:0] $end
$var wire 1 . branch $end
$var wire 1 / aluSrc $end
$var wire 3 0 ALUcontrol [2:0] $end
$scope module control_unit $end
$var wire 1 / aluSrc $end
$var wire 1 . branch $end
$var wire 3 1 funct3 [2:0] $end
$var wire 1 2 funct7 $end
$var wire 2 3 immSrc [1:0] $end
$var wire 1 + memWrite $end
$var wire 7 4 op [6:0] $end
$var wire 1 ) pcSrc $end
$var wire 1 ( regWrite $end
$var wire 2 5 resultSrc [1:0] $end
$var wire 1 % zero $end
$var wire 2 6 resultSrc_int [1:0] $end
$var wire 1 7 regWrite_int $end
$var wire 1 8 memWrite_int $end
$var wire 1 9 jump_int $end
$var wire 2 : immSrc_int [1:0] $end
$var wire 1 ; branch_int $end
$var wire 1 < aluSrc_int $end
$var wire 2 = aluOp [1:0] $end
$var wire 3 > ALUcontrol [2:0] $end
$scope module alu_decoder $end
$var wire 3 ? funct3 [2:0] $end
$var wire 1 2 funct7 $end
$var wire 7 @ opcode [6:0] $end
$var wire 2 A op [1:0] $end
$var parameter 4 B ADD $end
$var parameter 4 C AND $end
$var parameter 4 D BEQ $end
$var parameter 4 E JAL $end
$var parameter 4 F OR $end
$var parameter 4 G SLL $end
$var parameter 4 H SRL $end
$var parameter 4 I SUB $end
$var parameter 4 J XOR $end
$var reg 4 K ALUControl [3:0] $end
$upscope $end
$scope module main_decoder $end
$var wire 7 L op [6:0] $end
$var reg 2 M aluOp [1:0] $end
$var reg 1 < aluSrc $end
$var reg 1 ; branch $end
$var reg 2 N immSrc [1:0] $end
$var reg 1 9 jump $end
$var reg 1 8 memWrite $end
$var reg 1 7 regWrite $end
$var reg 2 O resultSrc [1:0] $end
$upscope $end
$upscope $end
$scope module data_path $end
$var wire 3 P ALUcontrol [2:0] $end
$var wire 1 / aluSrc $end
$var wire 1 # clk $end
$var wire 2 Q immSrc [1:0] $end
$var wire 1 + memWrite $end
$var wire 1 ) pcSrc $end
$var wire 1 ( regWrite $end
$var wire 1 $ reset $end
$var wire 2 R resultSrc [1:0] $end
$var wire 32 S writeData [31:0] $end
$var wire 1 % zero $end
$var wire 32 T srcb [31:0] $end
$var wire 32 U result [31:0] $end
$var wire 32 V readData [31:0] $end
$var wire 32 W rd2 [31:0] $end
$var wire 32 X rd1 [31:0] $end
$var wire 32 Y pcTarget [31:0] $end
$var wire 32 Z pcPlus4 [31:0] $end
$var wire 32 [ pcNext [31:0] $end
$var wire 32 \ pc [31:0] $end
$var wire 32 ] instruction [31:0] $end
$var wire 32 ^ immExt [31:0] $end
$var wire 32 _ aluResult [31:0] $end
$scope module alu $end
$var wire 3 ` ALUControl [2:0] $end
$var wire 32 a srcB [31:0] $end
$var wire 32 b srcA [31:0] $end
$var reg 32 c ALUResult [31:0] $end
$var reg 1 % zero $end
$upscope $end
$scope module alu_src_mux $end
$var wire 1 / sel $end
$var wire 32 d salMux [31:0] $end
$var wire 32 e e2 [31:0] $end
$var wire 32 f e1 [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 g res [31:0] $end
$var wire 32 h op2 [31:0] $end
$var wire 32 i op1 [31:0] $end
$upscope $end
$scope module data_memory $end
$var wire 5 j a [4:0] $end
$var wire 1 # clk $end
$var wire 1 + we $end
$var wire 32 k wd [31:0] $end
$var reg 32 l rd [31:0] $end
$upscope $end
$scope module instructionMemory $end
$var wire 32 m readData [31:0] $end
$var wire 32 n address [31:0] $end
$upscope $end
$scope module pc_increment $end
$var wire 32 o op2 [31:0] $end
$var wire 32 p res [31:0] $end
$var wire 32 q op1 [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 r e1 [31:0] $end
$var wire 32 s e2 [31:0] $end
$var wire 1 ) sel $end
$var wire 32 t salMux [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 # clk $end
$var wire 32 u pcNext [31:0] $end
$var wire 1 $ reset $end
$var reg 32 v pc [31:0] $end
$upscope $end
$scope module regFile $end
$var wire 5 w a1 [4:0] $end
$var wire 5 x a2 [4:0] $end
$var wire 5 y a3 [4:0] $end
$var wire 1 # clk $end
$var wire 32 z rd1 [31:0] $end
$var wire 32 { rd2 [31:0] $end
$var wire 1 ( we3 $end
$var wire 32 | wd3 [31:0] $end
$var integer 32 } i [31:0] $end
$upscope $end
$scope module result_mux $end
$var wire 32 ~ e1 [31:0] $end
$var wire 32 !" e2 [31:0] $end
$var wire 32 "" e3 [31:0] $end
$var wire 2 #" sel [1:0] $end
$var wire 32 $" sal [31:0] $end
$upscope $end
$scope module sign_ext $end
$var wire 2 %" immSrc [1:0] $end
$var wire 25 &" inm [24:0] $end
$var reg 32 '" immExt [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 J
b1 I
b110 H
b101 G
b11 F
b1001 E
b1000 D
b10 C
b0 B
$end
#0
$dumpvars
bx00000 '"
b110000000001000 &"
b0 %"
bx $"
b0 #"
b100 ""
bx !"
bx ~
b100000 }
bx |
b0 {
b0 z
b1000 y
b11 x
b0 w
b0 v
b100 u
b100 t
bx s
b100 r
b0 q
b100 p
b100 o
b0 n
b1100000000010000010011 m
bx l
b0 k
bx j
b0 i
bx00000 h
bx g
b0 f
bx00000 e
bx00000 d
bx c
b0 b
bx00000 a
b0 `
bx _
bx00000 ^
b1100000000010000010011 ]
b0 \
b100 [
b100 Z
bx Y
b0 X
b0 W
bx V
bx U
bx00000 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b10 M
b10011 L
b0 K
b10 A
b10011 @
b0 ?
b0 >
b10 =
1<
0;
b0 :
09
08
17
b0 6
b0 5
b10011 4
b0 3
02
b0 1
b0 0
1/
0.
b0 -
b1100000000010000010011 ,
0+
b0 *
0)
1(
b0 '
b0 &
0%
1$
0#
b0 "
bz !
$end
#5
1#
#10
0#
0$
#15
b1000 [
b1000 t
b1000 u
b10000000001001 &"
b1001 y
b1 x
b1000 Z
b1000 p
b1000 r
b1000 ""
b100000000010010010011 ,
b100000000010010010011 ]
b100000000010010010011 m
b100 "
b100 *
b100 \
b100 i
b100 n
b100 q
b100 v
1#
#20
0#
#25
b1100 [
b1100 t
b1100 u
b100000000000010010 &"
b10010 y
b10000 x
b1100 Z
b1100 p
b1100 r
b1100 ""
b1000000000000100100010011 ,
b1000000000000100100010011 ]
b1000000000000100100010011 m
b1000 "
b1000 *
b1000 \
b1000 i
b1000 n
b1000 q
b1000 v
1#
#30
0#
#35
b11 0
b11 >
b11 P
b11 `
bx T
bx a
bx d
b1100 Y
b1100 g
b1100 s
b0 ^
b0 e
b0 h
b0 '"
b11 K
bx -
bx 3
bx Q
bx %"
bx :
bx N
b10 =
b10 A
b10 M
0/
0<
1(
17
b10000 [
b10000 t
b10000 u
b10010100011000101 &"
b101 y
bx &
bx S
bx W
bx f
bx k
bx {
b1001 x
bx X
bx b
bx z
b1000 w
b110 1
b110 ?
b110011 4
b110011 @
b110011 L
b10000 Z
b10000 p
b10000 r
b10000 ""
b100101000110001010110011 ,
b100101000110001010110011 ]
b100101000110001010110011 m
b1100 "
b1100 *
b1100 \
b1100 i
b1100 n
b1100 q
b1100 v
1#
#40
0#
#45
b10 0
b10 >
b10 P
b10 `
b10 K
b10100 [
b10100 t
b10100 u
b10010100011100110 &"
b110 y
b111 1
b111 ?
b10100 Z
b10100 p
b10100 r
b10100 ""
b100101000111001100110011 ,
b100101000111001100110011 ]
b100101000111001100110011 m
b10000 Y
b10000 g
b10000 s
b10000 "
b10000 *
b10000 \
b10000 i
b10000 n
b10000 q
b10000 v
1#
#50
0#
#55
b0 0
b0 >
b0 P
b0 `
b0 K
b11000 [
b11000 t
b11000 u
b10010100000000111 &"
b111 y
b0 1
b0 ?
b11000 Z
b11000 p
b11000 r
b11000 ""
b100101000000001110110011 ,
b100101000000001110110011 ]
b100101000000001110110011 m
b10100 Y
b10100 g
b10100 s
b10100 "
b10100 *
b10100 \
b10100 i
b10100 n
b10100 q
b10100 v
1#
#60
0#
#65
b0 U
b0 |
b0 $"
b0 j
1%
b0 _
b0 c
b0 ~
bx 0
bx >
bx P
bx `
bx K
b11100 [
b11100 t
b11100 u
b100000010010100000011100 &"
b11100 y
12
b11100 Z
b11100 p
b11100 r
b11100 ""
b1000000100101000000111000110011 ,
b1000000100101000000111000110011 ]
b1000000100101000000111000110011 m
b11000 Y
b11000 g
b11000 s
b11000 "
b11000 *
b11000 \
b11000 i
b11000 n
b11000 q
b11000 v
1#
#70
0#
#75
b100000 [
b100000 t
b100000 u
b100000010000100100011101 &"
b11101 y
b1000 x
b1001 w
b100000 Z
b100000 p
b100000 r
b100000 ""
b1000000100001001000111010110011 ,
b1000000100001001000111010110011 ]
b1000000100001001000111010110011 m
b11100 Y
b11100 g
b11100 s
b11100 "
b11100 *
b11100 \
b11100 i
b11100 n
b11100 q
b11100 v
1#
#80
0#
#85
b100100 [
b100100 t
b100100 u
b10010100001011110 &"
b11110 y
b1001 x
b1000 w
02
b10 1
b10 ?
b100100 Z
b100100 p
b100100 r
b100100 ""
b100101000010111100110011 ,
b100101000010111100110011 ]
b100101000010111100110011 m
b100000 Y
b100000 g
b100000 s
b100000 "
b100000 *
b100000 \
b100000 i
b100000 n
b100000 q
b100000 v
1#
#90
0#
#95
b101000 [
b101000 t
b101000 u
b10000100101011111 &"
b11111 y
b1000 x
b1001 w
b101000 Z
b101000 p
b101000 r
b101000 ""
b100001001010111110110011 ,
b100001001010111110110011 ]
b100001001010111110110011 m
b100100 Y
b100100 g
b100100 s
b100100 "
b100100 *
b100100 \
b100100 i
b100100 n
b100100 q
b100100 v
1#
#100
0#
#105
b0 T
b0 a
b0 d
b101100 [
b101100 t
b101100 u
b111010100101011111 &"
b0 &
b0 S
b0 W
b0 f
b0 k
b0 {
b11101 x
b101100 Z
b101100 p
b101100 r
b101100 ""
b1110101001010111110110011 ,
b1110101001010111110110011 ]
b1110101001010111110110011 m
b101000 Y
b101000 g
b101000 s
b101000 "
b101000 *
b101000 \
b101000 i
b101000 n
b101000 q
b101000 v
1#
#110
0#
#115
bx U
bx |
bx $"
bx j
0%
bx _
bx c
bx ~
b0 0
b0 >
b0 P
b0 `
bx00000 T
bx00000 a
bx00000 d
bx00000 ^
bx00000 e
bx00000 h
bx00000 '"
b0 K
1/
1<
b10 =
b10 A
b10 M
b0 -
b0 3
b0 Q
b0 %"
b0 :
b0 N
1(
17
b110000 [
b110000 t
b110000 u
b10000000000101 &"
b101 y
b1 x
b0 X
b0 b
b0 z
b0 w
b0 1
b0 ?
b10011 4
b10011 @
b10011 L
b110000 Z
b110000 p
b110000 r
b110000 ""
b100000000001010010011 ,
b100000000001010010011 ]
b100000000001010010011 m
bx Y
bx g
bx s
b101100 "
b101100 *
b101100 \
b101100 i
b101100 n
b101100 q
b101100 v
1#
#120
0#
#125
b110100 [
b110100 t
b110100 u
b110 &"
b110 y
b0 x
b110100 Z
b110100 p
b110100 r
b110100 ""
b1100010011 ,
b1100010011 ]
b1100010011 m
b110000 "
b110000 *
b110000 \
b110000 i
b110000 n
b110000 q
b110000 v
1#
#130
0#
#135
bx T
bx a
bx d
bx0xxxxxx01010 ^
bx0xxxxxx01010 e
bx0xxxxxx01010 h
bx0xxxxxx01010 '"
b1000 K
1.
1;
bx '
bx 5
bx R
bx #"
bx 6
bx O
b10 -
b10 3
b10 Q
b10 %"
b10 :
b10 N
b1 =
b1 A
b1 M
0/
0<
0(
07
b111000 [
b111000 t
b111000 u
b100100010100010000 &"
b10000 y
bx &
bx S
bx W
bx f
bx k
bx {
b10010 x
bx X
bx b
bx z
b101 w
b1100011 4
b1100011 @
b1100011 L
b111000 Z
b111000 p
b111000 r
b111000 ""
b1001000101000100001100011 ,
b1001000101000100001100011 ]
b1001000101000100001100011 m
b110100 "
b110100 *
b110100 \
b110100 i
b110100 n
b110100 q
b110100 v
1#
#140
0#
#145
b111000 Y
b111000 g
b111000 s
b0 ^
b0 e
b0 h
b0 '"
b0 K
1(
17
b10 =
b10 A
b10 M
0.
0;
b0 '
b0 5
b0 R
b0 #"
b0 6
b0 O
bx -
bx 3
bx Q
bx %"
bx :
bx N
b111100 [
b111100 t
b111100 u
b1010010100000101 &"
b101 y
b101 x
b110011 4
b110011 @
b110011 L
b111100 Z
b111100 p
b111100 r
b111100 ""
b10100101000001010110011 ,
b10100101000001010110011 ]
b10100101000001010110011 m
b111000 "
b111000 *
b111000 \
b111000 i
b111000 n
b111000 q
b111000 v
1#
#150
0#
#155
bx00000 ^
bx00000 e
bx00000 h
bx00000 '"
bx00000 T
bx00000 a
bx00000 d
1/
1<
b10 =
b10 A
b10 M
b0 -
b0 3
b0 Q
b0 %"
b0 :
b0 N
1(
17
b1000000 [
b1000000 t
b1000000 u
b10011000000110 &"
b110 y
b0 &
b0 S
b0 W
b0 f
b0 k
b0 {
b1 x
b110 w
b10011 4
b10011 @
b10011 L
b1000000 Z
b1000000 p
b1000000 r
b1000000 ""
b100110000001100010011 ,
b100110000001100010011 ]
b100110000001100010011 m
bx Y
bx g
bx s
b111100 "
b111100 *
b111100 \
b111100 i
b111100 n
b111100 q
b111100 v
1#
#160
0#
#165
b1000100 U
b1000100 |
b1000100 $"
b0 j
1%
b0 _
b0 c
b0 ~
bx 0
bx >
bx P
bx `
1)
bx0x0xxxxxxxxxxxxx0 T
bx0x0xxxxxxxxxxxxx0 a
bx0x0xxxxxxxxxxxxx0 d
bx111010111xxxxxx11110 ^
bx111010111xxxxxx11110 e
bx111010111xxxxxx11110 h
bx111010111xxxxxx11110 '"
bx K
19
b10 '
b10 5
b10 R
b10 #"
b10 6
b10 O
b11 -
b11 3
b11 Q
b11 %"
b11 :
b11 N
bx =
bx A
bx M
x/
x<
1(
17
bx [
bx t
bx u
b1111111101011111111100000 &"
b0 y
b10101 x
b0 X
b0 b
b0 z
b11111 w
12
b111 1
b111 ?
b1101111 4
b1101111 @
b1101111 L
b1000100 Z
b1000100 p
b1000100 r
b1000100 ""
b11111111010111111111000001101111 ,
b11111111010111111111000001101111 ]
b11111111010111111111000001101111 m
b1000000 "
b1000000 *
b1000000 \
b1000000 i
b1000000 n
b1000000 q
b1000000 v
1#
#170
0#
#175
0)
b0 U
b0 |
b0 $"
bx ^
bx e
bx h
bx '"
bx T
bx a
bx d
09
b0 =
b0 A
b0 M
b0 '
b0 5
b0 R
b0 #"
b0 6
b0 O
0/
0<
b0 -
b0 3
b0 Q
b0 %"
b0 :
b0 N
0(
07
bx &"
bx y
bx &
bx S
bx W
bx f
bx k
bx {
bx x
bx X
bx b
bx z
bx w
x2
bx 1
bx ?
bx 4
bx @
bx L
bx Z
bx p
bx r
bx ""
bx ,
bx ]
bx m
bx "
bx *
bx \
bx i
bx n
bx q
bx v
1#
#180
0#
#185
1#
#190
0#
#195
1#
#200
0#
